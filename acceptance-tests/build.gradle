import java.text.SimpleDateFormat

plugins {
	id 'java'
	id 'checkstyle'
	id 'jacoco'
	id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.24'
	id 'com.diffplug.spotless'
	id 'com.github.spotbugs'
	id 'pmd'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

apply from: "${rootDir}/gradle/code-quality.gradle"

def cucumberVersion = '6.10.4'
def junitVersion = '5.7.2'


configurations {
	functionalTestImplementation
	functionalTestCompileOnly.extendsFrom functionalTestAnnotationProcessor
}

dependencies {
	functionalTestAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

	functionalTestCompileOnly 'com.google.code.findbugs:annotations:3.0.1'

	functionalTestImplementation project(":client")

	functionalTestImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
	functionalTestImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
	functionalTestImplementation "io.cucumber:cucumber-picocontainer:${cucumberVersion}"

	functionalTestImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	functionalTestImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

	functionalTestImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'

	functionalTestImplementation platform('org.springframework.boot:spring-boot-dependencies:2.7.8')
	functionalTestImplementation 'org.awaitility:awaitility:3.0.0'
	functionalTestImplementation 'com.google.cloud:google-cloud-secretmanager:2.5.0'
	functionalTestImplementation 'io.nuvalence.dsgov:dsgov-auth:0.0.8'
}

test {
	useJUnitPlatform()
}

sourceSets {
	functionalTest {
		java {}
	}
}

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

task functionalTest(type: Test) {
	doFirst {
		println "starting functional tests at: " + sdf.format(new Date())
	}
	description = 'Runs the functional tests.'
	group = 'verification'
	testClassesDirs = sourceSets.functionalTest.output.classesDirs
	classpath = sourceSets.functionalTest.runtimeClasspath
	outputs.upToDateWhen { false }
	useJUnitPlatform()
	systemProperty("cucumber.junit-platform.naming-strategy", "long")
	systemProperty("cucumber.plugin", "pretty, json:build/test-results/functionalTest/cucumber.json")
	finalizedBy generateCucumberReports
	if (project.hasProperty("baseUri")) {
		environment 'SERVICE_URI', "${baseUri}"
	}
	doLast {
		println "completing functional tests at: " + sdf.format(new Date())
	}
}

cucumberReports {
	outputDir = file('build/reports/cucumber')
	reports = files('build/test-results/functionalTest/cucumber.json')
	testTasksFinalizedByReport = false
}
